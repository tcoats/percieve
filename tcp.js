// Generated by CoffeeScript 1.10.0
var ndjson, net;

net = require('net');

ndjson = require('ndjson');

module.exports = {
  client: function(config) {
    var address, port, ref, ref1, res, tcpClient;
    port = (ref = config != null ? config.port : void 0) != null ? ref : 8125;
    address = (ref1 = config != null ? config.address : void 0) != null ? ref1 : void 0;
    tcpClient = net.connect(port, address);
    tcpClient.setEncoding('utf8');
    res = {
      emit: function(e, cb) {
        var data;
        data = JSON.stringify(e);
        data += '\n';
        return tcpClient.write(data, function(err) {
          if (cb == null) {
            return;
          }
          return cb(err);
        });
      },
      copy: function() {
        return res;
      },
      close: function(cb) {
        return tcpClient.close();
      }
    };
    return res;
  },
  server: function(config, cb) {
    var address, kids, port, ref, ref1, res, tcpServer;
    kids = [];
    port = (ref = config != null ? config.port : void 0) != null ? ref : 8125;
    address = (ref1 = config != null ? config.address : void 0) != null ? ref1 : void 0;
    tcpServer = net.createServer(function(socket) {
      socket.setEncoding('utf8');
      socket = socket.pipe(ndjson.parse());
      socket.on('error', function(err) {
        return tcpServer.emit('error', err);
      });
      return socket.on('data', function(e) {
        var i, k, len, results;
        results = [];
        for (i = 0, len = kids.length; i < len; i++) {
          k = kids[i];
          results.push(k.emit(e));
        }
        return results;
      });
    });
    if (cb != null) {
      tcpServer.on('error', function(err) {
        return cb(err);
      });
    }
    tcpServer.listen(port, address);
    res = function(k) {
      kids.push(k);
      return res;
    };
    res.emit = function(e) {
      var i, k, len, results;
      results = [];
      for (i = 0, len = kids.length; i < len; i++) {
        k = kids[i];
        results.push(k.emit(e));
      }
      return results;
    };
    res.close = function(cb) {
      return tcpServer.close(cb);
    };
    res.copy = function() {
      return res;
    };
    return res;
  }
};
