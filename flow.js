// Generated by CoffeeScript 1.10.0
var changed, combine, contextcount, contexttime, copy, debounce, each, error, extend, filter, groupcount, grouptime, log, map, now, rollup, samplecount, sampletime, settle, split, stream, tagged, taggedall, taggedany, unit;

extend = require('extend');

now = function() {
  return new Date().valueOf();
};

unit = function(params) {
  var kids, res;
  kids = [];
  res = function(k) {
    kids.push(k);
    return res;
  };
  res.emit = function(e) {
    return params.emit(e, function(e) {
      var i, k, len;
      for (i = 0, len = kids.length; i < len; i++) {
        k = kids[i];
        k.emit(e);
      }
      return null;
    });
  };
  if (params.copy == null) {
    res.copy = function() {
      var i, k, len, twin;
      twin = unit(params);
      for (i = 0, len = kids.length; i < len; i++) {
        k = kids[i];
        twin(k.copy());
      }
      return twin;
    };
  } else {
    res.copy = function() {
      var i, k, len, twin;
      twin = params.copy();
      for (i = 0, len = kids.length; i < len; i++) {
        k = kids[i];
        twin(k.copy());
      }
      return twin;
    };
  }
  return res;
};

stream = function() {
  return unit({
    emit: function(e, next) {
      return next(e);
    }
  });
};

filter = function(test) {
  return unit({
    emit: function(e, next) {
      if (test(e)) {
        return next(e);
      }
    }
  });
};

tagged = function(tag) {
  return unit({
    emit: function(e, next) {
      var i, len, ref, t;
      if (e.tags == null) {
        return;
      }
      ref = e.tags;
      for (i = 0, len = ref.length; i < len; i++) {
        t = ref[i];
        if (!(t === tag)) {
          continue;
        }
        next(e);
        return;
      }
    }
  });
};

taggedany = function(tags) {
  var i, len, t, tagmap;
  tagmap = {};
  for (i = 0, len = tags.length; i < len; i++) {
    t = tags[i];
    tagmap[t] = true;
  }
  return unit({
    emit: function(e, next) {
      var j, len1, ref;
      if (e.tags == null) {
        return;
      }
      ref = e.tags;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        t = ref[j];
        if (!tagmap[t]) {
          continue;
        }
        next(e);
        return;
      }
    }
  });
};

taggedall = function(tags) {
  var i, len, t, tagmap;
  tagmap = {};
  for (i = 0, len = tags.length; i < len; i++) {
    t = tags[i];
    tagmap[t] = true;
  }
  return unit({
    emit: function(e, next) {
      var count, j, len1, ref;
      if (e.tags == null) {
        return;
      }
      count = 0;
      ref = e.tags;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        t = ref[j];
        if (tagmap[t]) {
          count++;
        }
      }
      if (tags.length === count) {
        next(e);
      }
      return null;
    }
  });
};

each = function(fn) {
  return unit({
    emit: function(e, next) {
      fn(e);
      return next(e);
    }
  });
};

copy = unit({
  emit: function(e, next) {
    return next(extend(true, {}, e));
  }
});

map = function(fn) {
  return unit({
    emit: function(e, next) {
      return next(fn(e));
    }
  });
};

contexttime = function(ms) {
  var context;
  context = [];
  return unit({
    emit: function(e, next) {
      var events;
      events = [];
      context = context.filter(function(item) {
        if ((e.time - item.time) > ms) {
          return false;
        }
        events.push(item);
        return true;
      });
      context.push(e);
      return next(extend({}, e, {
        _events: events
      }));
    },
    copy: function() {
      return contexttime(ms);
    }
  });
};

contextcount = function(count) {
  var events;
  events = [];
  return unit({
    emit: function(e, next) {
      events.push(e);
      next(extend({}, e, {
        _events: events
      }));
      if (events.length > count) {
        return events.shift();
      }
    },
    copy: function() {
      return contextcount(count);
    }
  });
};

grouptime = function(ms) {
  var drain, events, handle, kids, res;
  kids = [];
  handle = null;
  events = [];
  drain = function() {
    var e, i, k, len;
    if (events.length > 0) {
      e = extend({}, events[events.length - 1], {
        _events: events
      });
      for (i = 0, len = kids.length; i < len; i++) {
        k = kids[i];
        k.emit(e);
      }
      events = [];
      return handle = setTimeout(drain, ms);
    } else {
      return handle = null;
    }
  };
  res = function(k) {
    kids.push(k);
    return res;
  };
  res.emit = function(e) {
    if (handle == null) {
      events = [e];
      handle = setTimeout(drain, ms);
    } else {
      events.push(e);
    }
    return null;
  };
  res.copy = function() {
    var i, k, len, twin;
    twin = grouptime(ms);
    for (i = 0, len = kids.length; i < len; i++) {
      k = kids[i];
      twin(k.copy());
    }
    return twin;
  };
  return res;
};

groupcount = function(count) {
  var events;
  events = [];
  return unit({
    emit: function(e, next) {
      events.push(e);
      if (events.length === count) {
        next(extend({}, events[events.length - 1], {
          _events: events
        }));
        return events = [];
      }
    },
    copy: function() {
      return groupcount(count);
    }
  });
};

sampletime = function(ms) {
  var last;
  last = null;
  return unit({
    emit: function(e, next) {
      if (last == null) {
        last = e.time;
        return;
      }
      if (e.time - last > ms) {
        next(e);
        return last = e.time;
      }
    },
    copy: function() {
      return sampletime(ms);
    }
  });
};

samplecount = function(count) {
  var index;
  index = 0;
  return unit({
    emit: function(e, next) {
      index++;
      if (index === count) {
        next(e);
        return index = 0;
      }
    },
    copy: samplecount(count)
  });
};

changed = function(selector, initial) {
  var previous;
  previous = initial;
  return unit({
    emit: function(e, next) {
      var current;
      current = selector(e);
      if (previous !== current) {
        next(extend({}, e, {
          _previous: previous,
          _current: current
        }));
      }
      return previous = current;
    },
    copy: function() {
      return changed(selector, initial);
    }
  });
};

settle = function(ms) {
  var drain, event, handle, kids, res;
  kids = [];
  handle = null;
  event = null;
  drain = function() {
    var i, k, len;
    for (i = 0, len = kids.length; i < len; i++) {
      k = kids[i];
      k.emit(event);
    }
    event = null;
    return handle = null;
  };
  res = function(k) {
    kids.push(k);
    return res;
  };
  res.emit = function(e) {
    if (handle != null) {
      clearTimeout(handle);
    }
    event = e;
    handle = setTimeout(drain, ms);
    return null;
  };
  res.copy = function() {
    var i, k, len, twin;
    twin = settle(ms);
    for (i = 0, len = kids.length; i < len; i++) {
      k = kids[i];
      twin(k.copy());
    }
    return twin;
  };
  return res;
};

debounce = function(ms) {
  var last;
  last = null;
  return unit({
    emit: function(e, next) {
      if (last == null) {
        last = e.time;
        return next(e);
      } else if (e.time - last > ms) {
        last = e.time;
        return next(e);
      }
    },
    copy: function() {
      return debounce(ms);
    }
  });
};

combine = function(streams) {
  var i, kids, len, res, s;
  kids = [];
  for (i = 0, len = streams.length; i < len; i++) {
    s = streams[i];
    s({
      emit: function(e) {
        return res.emit(e);
      }
    });
  }
  res = function(k) {
    kids.push(k);
    return res;
  };
  res.emit = function(e) {
    var j, k, len1;
    for (j = 0, len1 = kids.length; j < len1; j++) {
      k = kids[j];
      k.emit(e);
    }
    return null;
  };
  res.copy = function() {
    var j, k, len1, twin;
    twin = combine(streams);
    for (j = 0, len1 = kids.length; j < len1; j++) {
      k = kids[j];
      twin(k.copy());
    }
    return twin;
  };
  return res;
};

split = function(selector) {
  var kids, res, streams;
  kids = [];
  streams = {};
  res = function(k) {
    kids.push(k);
    return res;
  };
  res.emit = function(e) {
    var i, k, len, ref, value;
    value = selector(e);
    if (streams[value] == null) {
      streams[value] = kids.map(function(k) {
        return k.copy();
      });
    }
    ref = streams[value];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      k.emit(e);
    }
    return null;
  };
  res.copy = function() {
    var i, k, len, twin;
    twin = split(selector);
    for (i = 0, len = kids.length; i < len; i++) {
      k = kids[i];
      twin(k.copy());
    }
    return twin;
  };
  return res;
};

rollup = function(count, ms) {
  var drain, events, handle, kids, res;
  kids = [];
  handle = null;
  events = [];
  drain = function() {
    var e, i, k, len;
    e = extend({}, events[events.length - 1], {
      _events: events
    });
    for (i = 0, len = kids.length; i < len; i++) {
      k = kids[i];
      k.emit(e);
    }
    events = [];
    return handle = null;
  };
  res = function(k) {
    kids.push(k);
    return res;
  };
  res.emit = function(e) {
    var i, k, len;
    if (handle != null) {
      events.push(e);
      return;
    }
    events.push(e);
    events = events.filter(function(item) {
      return (e.time - item.time) < ms;
    });
    if (events.length <= count) {
      for (i = 0, len = kids.length; i < len; i++) {
        k = kids[i];
        k.emit(e);
      }
      return;
    }
    handle = setTimeout(drain, ms + events[0].time - e.time);
    return null;
  };
  res.copy = function() {
    var i, k, len, twin;
    twin = rollup(count, ms);
    for (i = 0, len = kids.length; i < len; i++) {
      k = kids[i];
      twin(k.copy());
    }
    return twin;
  };
  return res;
};

log = {
  emit: function(e) {
    return console.log(e);
  },
  copy: function() {
    return log;
  }
};

error = {
  emit: function(e) {
    return console.error(e);
  },
  copy: function() {
    return error;
  }
};

module.exports = {
  extend: extend,
  now: now,
  seconds: function(n) {
    return n * 1000;
  },
  minutes: function(n) {
    return n * 60000;
  },
  hours: function(n) {
    return n * 360000;
  },
  days: function(n) {
    return n * 8640000;
  },
  unit: unit,
  stream: stream,
  filter: filter,
  tagged: tagged,
  taggedany: taggedany,
  taggedall: taggedall,
  each: each,
  copy: copy,
  map: map,
  contexttime: contexttime,
  contextcount: contextcount,
  grouptime: grouptime,
  groupcount: groupcount,
  sampletime: sampletime,
  samplecount: samplecount,
  changed: changed,
  settle: settle,
  debounce: debounce,
  combine: combine,
  split: split,
  rollup: rollup,
  log: log,
  error: error
};
