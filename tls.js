// Generated by CoffeeScript 1.10.0
var fs, getcert, net, tls;

fs = require('fs');

net = require('net');

tls = require('tls');

getcert = function(pathname) {
  var i, len, path, results;
  if (pathname instanceof Array) {
    results = [];
    for (i = 0, len = pathname.length; i < len; i++) {
      path = pathname[i];
      results.push(getcert(path));
    }
    return results;
  } else if (fs.existsSync(pathname)) {
    return fs.readFileSync(pathname, 'utf8');
  }
};

module.exports = {
  client: function(config) {
    var address, certificates, port, ref, ref1, tlsClient;
    certificates = {};
    if (config.ca != null) {
      certificates.ca = [getcert(config.ca)];
    }
    certificates;
    port = (ref = config != null ? config.port : void 0) != null ? ref : 8126;
    address = (ref1 = config != null ? config.address : void 0) != null ? ref1 : void 0;
    tlsClient = tls.connect(port, address, certificates);
    tlsClient.setEncoding('utf8');
    return {
      send: function(message, cb) {
        return tlsClient.write(JSON.stringify(message));
      },
      close: function(cb) {
        return tlsClient.close();
      }
    };
  },
  server: function(config, cb) {
    var address, certificates, port, ref, ref1, tlsServer;
    certificates = {
      key: getcert(config.key),
      cert: getcert(config.cert),
      rejectUnauthorized: true
    };
    if (config.ca != null) {
      certificates.ca = [getcert(config.ca)];
    }
    certificates;
    port = (ref = config != null ? config.port : void 0) != null ? ref : 8126;
    address = (ref1 = config != null ? config.address : void 0) != null ? ref1 : void 0;
    tlsServer = tls.createServer(certificates, function(socket) {
      socket.setEncoding('utf8');
      socket.on('error', function(err) {
        return tlsServer.emit('error', err);
      });
      return socket.on('data', function(data) {
        return cb(null, JSON.parse(data));
      });
    });
    tlsServer.on('error', function(err) {
      return cb(err);
    });
    tlsServer.listen(port, address);
    return {
      close: function(cb) {
        return tlsServer.close();
      }
    };
  }
};
