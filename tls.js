// Generated by CoffeeScript 1.10.0
var fs, getcert, ndjson, net, tls;

fs = require('fs');

net = require('net');

tls = require('tls');

ndjson = require('ndjson');

getcert = function(pathname) {
  var i, len, path, results;
  if (pathname instanceof Array) {
    results = [];
    for (i = 0, len = pathname.length; i < len; i++) {
      path = pathname[i];
      results.push(getcert(path));
    }
    return results;
  } else if (fs.existsSync(pathname)) {
    return fs.readFileSync(pathname, 'utf8');
  }
};

module.exports = {
  client: function(config) {
    var address, certificates, port, ref, ref1, res, tlsClient;
    certificates = {};
    if (config.ca != null) {
      certificates.ca = [getcert(config.ca)];
    }
    certificates;
    port = (ref = config != null ? config.port : void 0) != null ? ref : 8126;
    address = (ref1 = config != null ? config.address : void 0) != null ? ref1 : void 0;
    tlsClient = tls.connect(port, address, certificates);
    tlsClient.setEncoding('utf8');
    res = {
      emit: function(e, cb) {
        var data;
        data = JSON.stringify(e);
        data += '\n';
        return tlsClient.write(data, function(err) {
          if (cb == null) {
            return;
          }
          return cb(err);
        });
      },
      copy: function() {
        return res;
      },
      close: function(cb) {
        return tcpClient.close();
      }
    };
    return res;
  },
  server: function(config, cb) {
    var address, certificates, kids, port, ref, ref1, res, tlsServer;
    kids = [];
    certificates = {
      key: getcert(config.key),
      cert: getcert(config.cert),
      rejectUnauthorized: true
    };
    if (config.ca != null) {
      certificates.ca = [getcert(config.ca)];
    }
    certificates;
    port = (ref = config != null ? config.port : void 0) != null ? ref : 8126;
    address = (ref1 = config != null ? config.address : void 0) != null ? ref1 : void 0;
    tlsServer = tls.createServer(certificates, function(socket) {
      socket.setEncoding('utf8');
      socket = socket.pipe(ndjson.parse());
      socket.on('error', function(err) {
        return tlsServer.emit('error', err);
      });
      return socket.on('data', function(e) {
        var i, k, len, results;
        results = [];
        for (i = 0, len = kids.length; i < len; i++) {
          k = kids[i];
          results.push(k.emit(e));
        }
        return results;
      });
    });
    if (cb != null) {
      tlsServer.on('error', function(err) {
        return cb(err);
      });
    }
    tlsServer.listen(port, address);
    res = function(k) {
      kids.push(k);
      return res;
    };
    res.close = function(cb) {
      return tlsServer.close(cb);
    };
    res.copy = function() {
      return res;
    };
    return res;
  }
};
